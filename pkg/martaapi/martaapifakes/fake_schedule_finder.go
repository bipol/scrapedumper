// Code generated by counterfeiter. DO NOT EDIT.
package martaapifakes

import (
	"sync"

	"github.com/bipol/scrapedumper/pkg/martaapi"
)

type FakeScheduleFinder struct {
	FindScheduleStub        func() (martaapi.Schedule, error)
	findScheduleMutex       sync.RWMutex
	findScheduleArgsForCall []struct {
	}
	findScheduleReturns struct {
		result1 martaapi.Schedule
		result2 error
	}
	findScheduleReturnsOnCall map[int]struct {
		result1 martaapi.Schedule
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeScheduleFinder) FindSchedule() (martaapi.Schedule, error) {
	fake.findScheduleMutex.Lock()
	ret, specificReturn := fake.findScheduleReturnsOnCall[len(fake.findScheduleArgsForCall)]
	fake.findScheduleArgsForCall = append(fake.findScheduleArgsForCall, struct {
	}{})
	fake.recordInvocation("FindSchedule", []interface{}{})
	fake.findScheduleMutex.Unlock()
	if fake.FindScheduleStub != nil {
		return fake.FindScheduleStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findScheduleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeScheduleFinder) FindScheduleCallCount() int {
	fake.findScheduleMutex.RLock()
	defer fake.findScheduleMutex.RUnlock()
	return len(fake.findScheduleArgsForCall)
}

func (fake *FakeScheduleFinder) FindScheduleCalls(stub func() (martaapi.Schedule, error)) {
	fake.findScheduleMutex.Lock()
	defer fake.findScheduleMutex.Unlock()
	fake.FindScheduleStub = stub
}

func (fake *FakeScheduleFinder) FindScheduleReturns(result1 martaapi.Schedule, result2 error) {
	fake.findScheduleMutex.Lock()
	defer fake.findScheduleMutex.Unlock()
	fake.FindScheduleStub = nil
	fake.findScheduleReturns = struct {
		result1 martaapi.Schedule
		result2 error
	}{result1, result2}
}

func (fake *FakeScheduleFinder) FindScheduleReturnsOnCall(i int, result1 martaapi.Schedule, result2 error) {
	fake.findScheduleMutex.Lock()
	defer fake.findScheduleMutex.Unlock()
	fake.FindScheduleStub = nil
	if fake.findScheduleReturnsOnCall == nil {
		fake.findScheduleReturnsOnCall = make(map[int]struct {
			result1 martaapi.Schedule
			result2 error
		})
	}
	fake.findScheduleReturnsOnCall[i] = struct {
		result1 martaapi.Schedule
		result2 error
	}{result1, result2}
}

func (fake *FakeScheduleFinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findScheduleMutex.RLock()
	defer fake.findScheduleMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeScheduleFinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ martaapi.ScheduleFinder = new(FakeScheduleFinder)
