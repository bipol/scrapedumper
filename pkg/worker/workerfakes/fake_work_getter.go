// Code generated by counterfeiter. DO NOT EDIT.
package workerfakes

import (
	"sync"

	"github.com/smartatransit/scrapedumper/pkg/worker"
)

type FakeWorkGetter struct {
	GetWorkStub        func() []worker.ScrapeDump
	getWorkMutex       sync.RWMutex
	getWorkArgsForCall []struct {
	}
	getWorkReturns struct {
		result1 []worker.ScrapeDump
	}
	getWorkReturnsOnCall map[int]struct {
		result1 []worker.ScrapeDump
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorkGetter) GetWork() []worker.ScrapeDump {
	fake.getWorkMutex.Lock()
	ret, specificReturn := fake.getWorkReturnsOnCall[len(fake.getWorkArgsForCall)]
	fake.getWorkArgsForCall = append(fake.getWorkArgsForCall, struct {
	}{})
	fake.recordInvocation("GetWork", []interface{}{})
	fake.getWorkMutex.Unlock()
	if fake.GetWorkStub != nil {
		return fake.GetWorkStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getWorkReturns
	return fakeReturns.result1
}

func (fake *FakeWorkGetter) GetWorkCallCount() int {
	fake.getWorkMutex.RLock()
	defer fake.getWorkMutex.RUnlock()
	return len(fake.getWorkArgsForCall)
}

func (fake *FakeWorkGetter) GetWorkCalls(stub func() []worker.ScrapeDump) {
	fake.getWorkMutex.Lock()
	defer fake.getWorkMutex.Unlock()
	fake.GetWorkStub = stub
}

func (fake *FakeWorkGetter) GetWorkReturns(result1 []worker.ScrapeDump) {
	fake.getWorkMutex.Lock()
	defer fake.getWorkMutex.Unlock()
	fake.GetWorkStub = nil
	fake.getWorkReturns = struct {
		result1 []worker.ScrapeDump
	}{result1}
}

func (fake *FakeWorkGetter) GetWorkReturnsOnCall(i int, result1 []worker.ScrapeDump) {
	fake.getWorkMutex.Lock()
	defer fake.getWorkMutex.Unlock()
	fake.GetWorkStub = nil
	if fake.getWorkReturnsOnCall == nil {
		fake.getWorkReturnsOnCall = make(map[int]struct {
			result1 []worker.ScrapeDump
		})
	}
	fake.getWorkReturnsOnCall[i] = struct {
		result1 []worker.ScrapeDump
	}{result1}
}

func (fake *FakeWorkGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getWorkMutex.RLock()
	defer fake.getWorkMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWorkGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.WorkGetter = new(FakeWorkGetter)
