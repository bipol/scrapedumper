// Code generated by counterfeiter. DO NOT EDIT.
package dumperfakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/bipol/scrapedumper/pkg/dumper"
)

type FakeDynamoPuter struct {
	BatchWriteItemWithContextStub        func(context.Context, *dynamodb.BatchWriteItemInput, ...request.Option) (*dynamodb.BatchWriteItemOutput, error)
	batchWriteItemWithContextMutex       sync.RWMutex
	batchWriteItemWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *dynamodb.BatchWriteItemInput
		arg3 []request.Option
	}
	batchWriteItemWithContextReturns struct {
		result1 *dynamodb.BatchWriteItemOutput
		result2 error
	}
	batchWriteItemWithContextReturnsOnCall map[int]struct {
		result1 *dynamodb.BatchWriteItemOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDynamoPuter) BatchWriteItemWithContext(arg1 context.Context, arg2 *dynamodb.BatchWriteItemInput, arg3 ...request.Option) (*dynamodb.BatchWriteItemOutput, error) {
	fake.batchWriteItemWithContextMutex.Lock()
	ret, specificReturn := fake.batchWriteItemWithContextReturnsOnCall[len(fake.batchWriteItemWithContextArgsForCall)]
	fake.batchWriteItemWithContextArgsForCall = append(fake.batchWriteItemWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *dynamodb.BatchWriteItemInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("BatchWriteItemWithContext", []interface{}{arg1, arg2, arg3})
	fake.batchWriteItemWithContextMutex.Unlock()
	if fake.BatchWriteItemWithContextStub != nil {
		return fake.BatchWriteItemWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.batchWriteItemWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDynamoPuter) BatchWriteItemWithContextCallCount() int {
	fake.batchWriteItemWithContextMutex.RLock()
	defer fake.batchWriteItemWithContextMutex.RUnlock()
	return len(fake.batchWriteItemWithContextArgsForCall)
}

func (fake *FakeDynamoPuter) BatchWriteItemWithContextCalls(stub func(context.Context, *dynamodb.BatchWriteItemInput, ...request.Option) (*dynamodb.BatchWriteItemOutput, error)) {
	fake.batchWriteItemWithContextMutex.Lock()
	defer fake.batchWriteItemWithContextMutex.Unlock()
	fake.BatchWriteItemWithContextStub = stub
}

func (fake *FakeDynamoPuter) BatchWriteItemWithContextArgsForCall(i int) (context.Context, *dynamodb.BatchWriteItemInput, []request.Option) {
	fake.batchWriteItemWithContextMutex.RLock()
	defer fake.batchWriteItemWithContextMutex.RUnlock()
	argsForCall := fake.batchWriteItemWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDynamoPuter) BatchWriteItemWithContextReturns(result1 *dynamodb.BatchWriteItemOutput, result2 error) {
	fake.batchWriteItemWithContextMutex.Lock()
	defer fake.batchWriteItemWithContextMutex.Unlock()
	fake.BatchWriteItemWithContextStub = nil
	fake.batchWriteItemWithContextReturns = struct {
		result1 *dynamodb.BatchWriteItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoPuter) BatchWriteItemWithContextReturnsOnCall(i int, result1 *dynamodb.BatchWriteItemOutput, result2 error) {
	fake.batchWriteItemWithContextMutex.Lock()
	defer fake.batchWriteItemWithContextMutex.Unlock()
	fake.BatchWriteItemWithContextStub = nil
	if fake.batchWriteItemWithContextReturnsOnCall == nil {
		fake.batchWriteItemWithContextReturnsOnCall = make(map[int]struct {
			result1 *dynamodb.BatchWriteItemOutput
			result2 error
		})
	}
	fake.batchWriteItemWithContextReturnsOnCall[i] = struct {
		result1 *dynamodb.BatchWriteItemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeDynamoPuter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.batchWriteItemWithContextMutex.RLock()
	defer fake.batchWriteItemWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDynamoPuter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dumper.DynamoPuter = new(FakeDynamoPuter)
