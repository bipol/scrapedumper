// Code generated by counterfeiter. DO NOT EDIT.
package postgresfakes

import (
	"sync"

	"github.com/bipol/scrapedumper/pkg/martaapi"
	"github.com/bipol/scrapedumper/pkg/postgres"
)

type FakeUpserter struct {
	AddRecordToDatabaseStub        func(martaapi.Schedule) error
	addRecordToDatabaseMutex       sync.RWMutex
	addRecordToDatabaseArgsForCall []struct {
		arg1 martaapi.Schedule
	}
	addRecordToDatabaseReturns struct {
		result1 error
	}
	addRecordToDatabaseReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUpserter) AddRecordToDatabase(arg1 martaapi.Schedule) error {
	fake.addRecordToDatabaseMutex.Lock()
	ret, specificReturn := fake.addRecordToDatabaseReturnsOnCall[len(fake.addRecordToDatabaseArgsForCall)]
	fake.addRecordToDatabaseArgsForCall = append(fake.addRecordToDatabaseArgsForCall, struct {
		arg1 martaapi.Schedule
	}{arg1})
	fake.recordInvocation("AddRecordToDatabase", []interface{}{arg1})
	fake.addRecordToDatabaseMutex.Unlock()
	if fake.AddRecordToDatabaseStub != nil {
		return fake.AddRecordToDatabaseStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addRecordToDatabaseReturns
	return fakeReturns.result1
}

func (fake *FakeUpserter) AddRecordToDatabaseCallCount() int {
	fake.addRecordToDatabaseMutex.RLock()
	defer fake.addRecordToDatabaseMutex.RUnlock()
	return len(fake.addRecordToDatabaseArgsForCall)
}

func (fake *FakeUpserter) AddRecordToDatabaseCalls(stub func(martaapi.Schedule) error) {
	fake.addRecordToDatabaseMutex.Lock()
	defer fake.addRecordToDatabaseMutex.Unlock()
	fake.AddRecordToDatabaseStub = stub
}

func (fake *FakeUpserter) AddRecordToDatabaseArgsForCall(i int) martaapi.Schedule {
	fake.addRecordToDatabaseMutex.RLock()
	defer fake.addRecordToDatabaseMutex.RUnlock()
	argsForCall := fake.addRecordToDatabaseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUpserter) AddRecordToDatabaseReturns(result1 error) {
	fake.addRecordToDatabaseMutex.Lock()
	defer fake.addRecordToDatabaseMutex.Unlock()
	fake.AddRecordToDatabaseStub = nil
	fake.addRecordToDatabaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpserter) AddRecordToDatabaseReturnsOnCall(i int, result1 error) {
	fake.addRecordToDatabaseMutex.Lock()
	defer fake.addRecordToDatabaseMutex.Unlock()
	fake.AddRecordToDatabaseStub = nil
	if fake.addRecordToDatabaseReturnsOnCall == nil {
		fake.addRecordToDatabaseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addRecordToDatabaseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUpserter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addRecordToDatabaseMutex.RLock()
	defer fake.addRecordToDatabaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUpserter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ postgres.Upserter = new(FakeUpserter)
